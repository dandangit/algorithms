SinglyLinkedList.java
============================================================
The code is about the basic operations on singly-linked list.

It contains solutions to the following LeetCode problems:
206. Reverse Linked List
Reverse a linked list iteratively and recursively. 

92. Reverse Linked List II
Reverse a linked list from position m to n. 
Do it in-place and in one-pass.

25. Reverse Nodes in k-Group
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
You may not alter the values in the nodes, only nodes itself may be changed.
Only constant memory is allowed.
For example,
Given this linked list: 1->2->3->4->5
For k = 2, you should return: 2->1->4->3->5
For k = 3, you should return: 3->2->1->4->5

RandomLinkedList.java
============================================================
The code is for leetcode 138. Copy List with Random Pointer.
A linked list is given such that each node contains an additional random pointer 
which could point to any node in the list or null.
Return a deep copy of the list.
1) The naiive solution is to use a hash map which stores the mapping from random pointer 
in original list to its corresponding node in copy list. 
In such way, we can copy the random pointer in 2nd scan.
2) A better solution from 
https://discuss.leetcode.com/topic/7594/a-solution-with-constant-space-complexity-o-1-and-linear-time-complexity-o-n
